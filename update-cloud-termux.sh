#!/bin/bash

echo "=================================================================="
echo "üîß ATUALIZANDO CLOUD-TERMUX - VERS√ÉO 1.2"
echo "=================================================================="
echo "‚ú® Novas funcionalidades:"
echo "   üìÅ Cria√ß√£o de pastas"
echo "   ‚¨áÔ∏è Download de arquivos"
echo "   üíæ Monitor de espa√ßo livre"
echo "   ‚öôÔ∏è Configura√ß√µes de armazenamento externo"
echo "   üì± Interface mobile otimizada"
echo "=================================================================="

# Cores
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCESSO]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[AVISO]${NC} $1"
}

# Parar servidor se estiver rodando
log_info "Parando servidor atual..."
kill $(cat cloud-termux.pid) 2>/dev/null || pkill -f "node server" || true

# Fazer backup da configura√ß√£o atual
if [ -f "storage-config.json" ]; then
    cp storage-config.json storage-config.backup.json
    log_info "Backup das configura√ß√µes criado"
fi

# Atualizar c√≥digo
log_info "Atualizando c√≥digo..."
git pull origin capy/cap-1-4511e2fe

# Usar servidor adaptativo como padr√£o
if [ -f "server-adaptive.js" ]; then
    cp server-adaptive.js server.js
    log_success "Servidor adaptativo ativado"
fi

# Usar package seguro como padr√£o  
if [ -f "package-safe.json" ]; then
    cp package-safe.json package.json
    log_success "Depend√™ncias seguras ativadas"
fi

# Reinstalar depend√™ncias (modo seguro)
log_info "Reinstalando depend√™ncias..."
rm -rf node_modules package-lock.json
npm install --no-optional --production

if [ $? -eq 0 ]; then
    log_success "Depend√™ncias instaladas com sucesso"
else
    log_warning "Problemas na instala√ß√£o, mas continuando..."
fi

# Criar diret√≥rios necess√°rios
log_info "Verificando estrutura de pastas..."
mkdir -p database temp public/uploads
chmod 755 public/uploads temp

# Testar funcionalidades b√°sicas
log_info "Testando funcionalidades..."
node -e "
const fs = require('fs');
const path = require('path');

// Teste 1: Criar e escrever arquivo
const testFile = path.join(__dirname, 'temp', 'test.txt');
fs.writeFileSync(testFile, 'teste');
fs.unlinkSync(testFile);
console.log('‚úÖ Escrita em temp/ OK');

// Teste 2: Verificar m√≥dulos principais
const express = require('express');
console.log('‚úÖ Express OK');

const bcrypt = require('bcryptjs');
console.log('‚úÖ bcryptjs OK');

console.log('‚úÖ Todos os testes passaram');
" 2>/dev/null

if [ $? -eq 0 ]; then
    log_success "Testes funcionais OK"
else
    log_warning "Alguns testes falharam, mas deve funcionar"
fi

echo ""
echo "=================================================================="
echo -e "${GREEN}üéâ ATUALIZA√á√ÉO CONCLU√çDA!${NC}"
echo "=================================================================="
echo ""
echo "üöÄ NOVAS FUNCIONALIDADES DISPON√çVEIS:"
echo ""
echo "üìÅ PASTAS:"
echo "   ‚Ä¢ Criar pastas pela interface web"
echo "   ‚Ä¢ Navegar entre pastas"
echo "   ‚Ä¢ Upload direto para pastas"
echo ""
echo "‚¨áÔ∏è DOWNLOAD:"
echo "   ‚Ä¢ Bot√£o de download em cada arquivo"
echo "   ‚Ä¢ Download direto no navegador"
echo ""
echo "üíæ ARMAZENAMENTO:"
echo "   ‚Ä¢ Monitor de espa√ßo livre em tempo real"
echo "   ‚Ä¢ Configurar armazenamento externo (cart√£o SD)"
echo "   ‚Ä¢ Informa√ß√µes detalhadas de storage"
echo ""
echo "üì± MOBILE:"
echo "   ‚Ä¢ Interface 100% otimizada para celulares"
echo "   ‚Ä¢ Menu lateral responsivo"
echo "   ‚Ä¢ Touch-friendly em todas as telas"
echo ""
echo "=================================================================="
echo "üéØ COMO USAR:"
echo ""
echo "1. Iniciar servidor:"
echo "   ./start-cloud.sh"
echo ""
echo "2. Acessar interface:"
echo "   http://localhost:8080"
echo ""
echo "3. Testar novas funcionalidades:"
echo "   ‚Ä¢ Arquivos ‚Üí Nova Pasta"
echo "   ‚Ä¢ Configura√ß√µes ‚Üí Armazenamento Externo"
echo "   ‚Ä¢ Download de qualquer arquivo"
echo ""
echo "4. Configurar cart√£o SD (exemplo):"
echo "   /storage/3B07-4AB2/"
echo "   /data/data/com.termux/files/home/storage/shared/"
echo ""
echo "=================================================================="

read -p "Iniciar servidor atualizado agora? (s/n): " start_now

if [ "$start_now" = "s" ] || [ "$start_now" = "S" ]; then
    log_info "Iniciando Cloud-Termux atualizado..."
    echo ""
    ./start-cloud.sh
fi